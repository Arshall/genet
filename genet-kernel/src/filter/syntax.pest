WHITESPACE = _{ " " | "\t" | "\r" | "\n" }
macro_exp = @{ "@" ~ (!(WHITESPACE) ~ ANY)+ }

dec_integer = @{ ASCII_DIGIT+ }
hex_integer = @{ "0x" ~ ASCII_HEX_DIGIT+ }
oct_integer = @{ "0o" ~ ASCII_OCT_DIGIT+ }
bin_integer = @{ "0b" ~ ASCII_BIN_DIGIT+ }

float = @{ "-"? ~ ASCII_DIGIT+ ~ "." ~ ASCII_DIGIT+ }

integer = _{ hex_integer | oct_integer | bin_integer | dec_integer }
nil = @{ "nil" ~ !(ASCII_ALPHA | "_" | ".") }
boolean = @{ ("true" | "false") ~ !(ASCII_ALPHA | "_" | ".") }
literal = _{ nil | boolean | float | integer }

identifier = @{ (ASCII_ALPHA | "_") ~ (ASCII_ALPHA | ASCII_DIGIT | "_")* }
member = @{ identifier ~ ("." ~ identifier)* }

op_unary_plus = { "+" }
op_unary_negation = { "-" }
op_logical_negation = { "!" }

op_eq = { "==" }
op_ne = { "!=" }
op_lt = { "<" }
op_gt = { ">" }
op_lte = { "<=" }
op_gte = { ">=" }
op_logical_and = { "&&" }
op_logical_or = { "||" }

infix_operator = _{ op_eq | op_ne | op_lte | op_gte | op_lt | op_gt | op_logical_and | op_logical_or }
unary = _{ op_unary_plus | op_unary_negation | op_logical_negation }
unary_operand = _{ ("(" ~ expression ~ ")") | literal | member | macro_exp }

expression = { primary ~ (infix_operator ~ primary)* }
primary = { unary* ~ unary_operand }

filter = !{ SOI ~ expression ~ EOI }